# Download 
# Tyler T. Hardy 2018

import requests
import simplejson as json
import getpass
from calendar import monthrange
import re
import os

#######################
# Config
#######################
username = 'tylerthardy'

#Define WRS rows and paths here; lengths must match, with each element corresponding with its complement (e.g. (WRSrows[0], WRSpaths[0]) corresponds with the WRS scene 39, 20)
WRSrows = [39, 39, 40, 39, 40, 41, 42, 39, 40, 39, 40, 39, 40, 41, 42, 39, 40, 41, 39, 40, 42, 43, 39, 40]
WRSpaths = [20, 18, 18, 25, 25, 16, 16, 23, 23, 21, 21, 19, 26, 26, 26, 17, 17, 17, 24, 24, 15, 15, 22, 22]
datasetType = "LANDSAT_TM_C1" # Dataset types found here: https://dds.cr.usgs.gov/ee-data/coveragemaps/kml/ee/
months = [6, 7, 8]
years = [2005]
beforeKatrina = True #August 23rd, 2005 - August 31, 2005

products = [
	"source_metadata",
	# "l1",
	# "toa",
	# "bt",
	# "sr",
	"sr_ndvi",
	# "sr_evi",
	# "sr_savi",
	# "sr_msavi",
	"sr_ndmi",
	# "sr_nbr",
	# "sr_nbr2",
	# "stats",
	# "pixel_qa"
]


downloadNote = "Download for NGOM Summer %s NDVI/NDMI imagery. Automatically generated by http://github.com/ecospatial/NAS_2016/tree/master/DataMiner/findData.py" % years


#######################
# Definitions
#######################
eeUrl = "https://earthexplorer.usgs.gov/inventory/json/v/1.4.0/"
espaUrl = 'https://espa.cr.usgs.gov/api/v1/'
NORTHWEST = 0
NORTHEAST = 1
SOUTHEAST = 2
SOUTHWEST = 3
MAX_RESULTS = 50000
ROW_PATH_REGEX = ".* Path: (\\d*), Row: (\\d*)"
KATRINA_DATE_CHECK = "(\\d*)-(\\d*)-(\\d*)"
KATRINA_DAY = 23
KATRINA_MONTH = 8
KATRINA_YEAR = 2005

def sendEERequest(endpoint, params):
    headers = {'Content-type': 'application/json'}
    r = requests.post(eeUrl + endpoint, data=dict(jsonRequest=json.dumps(params)))
    response = r.json()
    if response["errorCode"] is None:
        return response
    else:
        print "Error: " + response["errorCode"]
        return None

def getWRSBounding(arrayRow, arrayPath, WRStype = 2):
	minRow = min(arrayRow)
	maxRow = max(arrayRow)
	minPath = min(arrayPath)
	maxPath = max(arrayPath)
	
	lowerLeft = getWRSCoords(maxRow, maxPath, WRStype)
	upperRight = getWRSCoords(minRow, minPath, WRStype)
		
	minX = lowerLeft[SOUTHWEST]["longitude"]
	maxX = upperRight[NORTHEAST]["longitude"]
	minY = upperRight[NORTHWEST]["latitude"]
	maxY = lowerLeft[SOUTHEAST]["latitude"]
	
	output = {
		"lowerLeft": {
			"latitude": maxY,
			"longitude": minX
		},
		"upperRight":{
			"latitude": minY,
			"longitude": maxX
		}
	}
	return output
	
def getWRSCoords(row, path, WRStype = 2):
	if (WRStype != 1 and WRStype != 2):
		WRStype = 2
	params = {
		"gridType": "WRS%s" % WRStype,
		"responseShape": "polygon",
		"path": path,
		"row": row
	}
	response = sendEERequest("grid2ll", params)
	if response is None:
		return None
	else:
		return response["data"]["coordinates"]
		
		
#https://github.com/USGS-EROS/espa-api/blob/master/examples/api_demo.py#L77-L93
def espa_api(endpoint, verb='get', body=None, uauth=None):
    auth_tup = uauth if uauth else (username, password)
    response = getattr(requests, verb)(espaUrl + endpoint, auth=auth_tup, json=body)
    # print('{} {}'.format(response.status_code, response.reason))
    data = response.json()
    if isinstance(data, dict):
        messages = data.pop("messages", None)  
        if messages:
            print(json.dumps(messages, indent=4))
    try:
        response.raise_for_status()
    except Exception as e:
        print(e)
        return None
    else:
        return data

#######################
# Get Scenes from EE
#######################

print "Logging in to EarthExplorer..."
print "Enter password for %s" % username
password = getpass.getpass()
apiKey = sendEERequest("login", {'username':username, 'password':password, 'catalogId':'EE'})["data"]
if apiKey is None:
	exit()
print "Logged in!"


#######################

print "Grabbing rectangle coordinates from WRS ids"
boundingBox = getWRSBounding(WRSrows, WRSpaths)

#######################

startDate = "%s-%s-01" % (min(years), min(months))
endDate = "%s-%s-%s" % (max(years), max(months), monthrange(max(years), max(months))[1])
dataQueryParams = {
	'datasetName': datasetType,
	'spatialFilter': {
		'filterType': 'mbr',
		'lowerLeft': {
			'latitude': boundingBox["lowerLeft"]["latitude"],
			'longitude': boundingBox["lowerLeft"]["longitude"]
		},
		'upperRight': {
			'latitude': boundingBox["upperRight"]["latitude"],
			'longitude': boundingBox["upperRight"]["longitude"]
		},
	},
	'temporalFilter' : {
		'startDate' : startDate,
		'endDate' : endDate
	},
	'apiKey' : apiKey,
	'maxResults': MAX_RESULTS
}
print "Searching datasets...",
datasets = sendEERequest("search", dataQueryParams)
if datasets is None:
	exit()
if datasets["data"] is not None and datasets["data"]["totalHits"] is not None:
	print "%s datasets found!" % datasets["data"]["totalHits"]

if datasets["data"]["totalHits"] >= MAX_RESULTS:
	print "Max dataset search limit; please reduce query and try again"
	exit()

	
sceneList = []

# QA for WRS row/path; the bounding box is greedy, so drop WRS row/paths that aren't in initial config
qaCheck = True
for dataset in datasets["data"]["results"]:
	found = False
	p = re.compile(ROW_PATH_REGEX)
	m = p.match(dataset["summary"])
	
	if m.group() is None:
		print "Error in regex matching to QA WRS row/paths; skipped QA"
		qaCheck = False
		break
	
	dsPath = int(m.group(1).lstrip('0'))
	dsRow = int(m.group(2).lstrip('0'))
	for i in range(0, len(WRSrows)):
		if (dsRow == WRSrows[i] and dsPath == WRSpaths[i]):
			found = True
			break
	if found:
		sceneList.append(dataset["displayId"])

if not qaCheck:
	sceneList = []
	for dataset in datasets["data"]["results"]:
		sceneList.append(dataset["displayId"])

if beforeKatrina and KATRINA_YEAR in years and KATRINA_MONTH in months:
	print "Removing post-Katrina imagery...",
	sceneList = []
	removed = 0
	for dataset in datasets["data"]["results"]:
		p = re.compile(KATRINA_DATE_CHECK)
		m = p.match(dataset["acquisitionDate"])
		year = int(m.group(1).lstrip('0'))
		month = int(m.group(2).lstrip('0'))
		day = int(m.group(3).lstrip('0'))
		if year == KATRINA_YEAR and month >= KATRINA_MONTH and day >= KATRINA_DAY:
			removed += 1
			continue
		sceneList.append(dataset["displayId"])
	print "Removed %s post-Katrina scenes" % removed

#######################
# Download Scenes from ESPA
#######################

print "Logging in to ESPA...",
r = espa_api('user')
if r is None:
	exit()
print "Success!"

avail_list = {
 'inputs': sceneList
}
resp = espa_api('available-products', body=avail_list)
print json.dumps(resp, indent=4)

collections = [s for s in resp.keys() if "collection" in s]
order = {
	# Collections added by code below
	"format": "gtiff",
	"note": downloadNote
}

for c in collections:
	order[c] = resp[c]
	order[c]["products"] = products

# print json.dumps(order, indent=4)

print "Ordering...",
orderResponse = espa_api('order', verb='post', body=order)
# print json.dumps(orderResponse, indent=4)
if orderResponse["status"] is not None and orderResponse["status"] == "ordered" and orderResponse["orderid"] is not None:
	print "Order complete!"
	orderId = orderResponse["orderid"]
	print orderId
else:
	print "Failed!"

